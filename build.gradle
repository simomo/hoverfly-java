plugins {
    id 'net.researchgate.release' version '2.4.0'
    id "de.undercouch.download" version "3.1.2"
    id "com.github.hierynomus.license" version "0.13.1"
    id 'com.github.ben-manes.versions' version '0.13.0'
    id 'java'
    id 'maven'
    id 'signing'
    id 'idea'
    id 'jacoco'
}

group = 'io.specto'
archivesBaseName = 'hoverfly-java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext."release.useAutomaticVersion" = true

allprojects {
    ext."signing.keyId" = "$System.env.MAVEN_GPG_KEYNAME"
    ext."signing.password" = "$System.env.MAVEN_GPG_PASSPHRASE"
    ext."signing.secretKeyRingFile" = "$System.env.HOME/.gnupg/secring.gpg"
    ext.ossrhUsername = "$System.env.MAVEN_CENTRAL_USERNAME"
    ext.ossrhPassword = "$System.env.MAVEN_CENTRAL_PASSWORD"
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'junit:junit:4.12'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.5'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.sun.jersey:jersey-client:1.19.3'
    compile 'org.glassfish.jersey.media:jersey-media-json-jackson:2.25'
    compile 'org.zeroturnaround:zt-exec:1.9'
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'ch.qos.logback:logback-classic:1.1.7'
    testCompile 'com.google.guava:guava:20.0'
    testCompile 'org.springframework:spring-web:4.3.4.RELEASE'
    testCompile 'org.apache.httpcomponents:httpclient:4.5.2'
    testCompile 'org.assertj:assertj-core:3.6.1'
    testCompile 'net.javacrumbs.json-unit:json-unit:1.17.0'
    testCompile 'net.javacrumbs.json-unit:json-unit-fluent:1.17.0'
    testCompile 'org.eclipse.jetty:jetty-server:9.3.11.v20160721'
    testCompile 'org.skyscreamer:jsonassert:1.4.0'
    testCompile 'org.mockito:mockito-core:2.3.7'
    testCompile 'org.powermock:powermock-module-junit4:1.6.6'
    testCompile 'org.jboss.resteasy:resteasy-client:3.1.0.Final'
    testCompile 'org.jboss.resteasy:resteasy-jaxrs:3.1.0.Final'
}


signing {
    sign configurations.archives
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

afterReleaseBuild.dependsOn uploadArchives

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: "$ossrhUsername", password: "$ossrhPassword")
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: "$ossrhUsername", password: "$ossrhPassword")
            }

            pom.project {
                name 'Hoverfly Java'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Hoverfly for Java. Capture and simulate HTTP(S) services in JUnit tests.'
                url 'https://github.com/SpectoLabs/hoverfly-java'

                scm {
                    connection 'scm:git:git@github.com:SpectoLabs/hoverfly-java.git'
                    developerConnection 'scm:git:git@github.com:SpectoLabs/hoverfly-java.git'
                    url 'git@github.com:SpectoLabs/hoverfly-java.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        name 'Andrew Morgan'
                        email 'andrew.morgan@opencredo.com'
                        organization 'Specto Labs'
                        organizationUrl 'http://www.specto.io'
                    }
                    developer {
                        name 'Tommy Situ'
                        email 'tommy.situ@specto.io'
                        organization 'Specto Labs'
                        organizationUrl 'http://www.specto.io'
                    }
                }
            }
        }
    }
}

license {
    header = file('license-header.txt')
    strictCheck true
    include "src/main/**/*.java"
    ext.inceptionYear = 2016
    ext.currentYear = Calendar.getInstance().get(Calendar.YEAR)
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.1'
}

// Tasks for updating Hoverfly binaries
import de.undercouch.gradle.tasks.download.Download
import java.util.regex.Pattern

task downloadHoverflyDistributions(type: Download) {
    def downloadUrl = 'https://github.com/SpectoLabs/hoverfly/releases/download'
    def version = project.property('hoverfly-version')
    println "Checking out Hoverfly $version"
    src([
            "$downloadUrl/$version/hoverfly_bundle_linux_386.zip",
            "$downloadUrl/$version/hoverfly_bundle_linux_amd64.zip",
            "$downloadUrl/$version/hoverfly_bundle_OSX_amd64.zip",
            "$downloadUrl/$version/hoverfly_bundle_windows_386.zip",
            "$downloadUrl/$version/hoverfly_bundle_windows_amd64.zip"
    ])
    dest "$buildDir/tmp/dist"
    onlyIfNewer true
}


task updateHoverflyBinaries(dependsOn: downloadHoverflyDistributions) {
    def distDir = file(downloadHoverflyDistributions.dest)
    def extractBinary = { FileTree zip ->
        copy {
            from zip
            into 'src/main/resources/binaries'
            rename { String filename ->
                def p1 = Pattern.compile('hoverfly(.*)')
                def m1 = p1.matcher(filename)
                def extension = m1.find() ? m1.group(1) : ''
                def p2 = Pattern.compile('hoverfly_bundle(.+?)\\.zip')
                def m2 = p2.matcher(zip.asPath)
                def type = m2.find() ? m2.group(1) : ''
                filename = 'hoverfly' + type + extension
            }
        }
    }

    distDir.listFiles()
            .findAll { it.name.endsWith('.zip') }
            .collect { zipTree(it).matching { include 'hoverfly*' } }
            .each { zip -> extractBinary(zip) }
}